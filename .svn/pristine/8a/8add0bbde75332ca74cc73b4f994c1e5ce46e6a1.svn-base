package com.dome.sdkserver.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.alibaba.fastjson.JSONObject;
import com.dome.sdkserver.listener.SnyAppInfoListToBiListener;
import com.dome.sdkserver.listener.SnyAppInfoToBiListener;
import com.dome.sdkserver.service.*;
import com.dome.sdkserver.util.MultipleDatasource;
import org.apache.commons.lang3.StringUtils;
import org.springframework.amqp.core.AmqpTemplate;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.util.CollectionUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.dome.sdkserver.aop.AppOperLogger;
import com.dome.sdkserver.bo.AppTypeAttrInfo;
import com.dome.sdkserver.bo.CallbackAudit;
import com.dome.sdkserver.bo.MerchantAppInfo;
import com.dome.sdkserver.bo.Paginator;
import com.dome.sdkserver.bo.SearchMerchantAppBo;
import com.dome.sdkserver.bo.pkgmanage.Pkg;
import com.dome.sdkserver.bq.util.IPUtil;
import com.dome.sdkserver.constants.AppChannelEnum;
import com.dome.sdkserver.constants.AppStatusEnum;
import com.dome.sdkserver.constants.AppTypeConstant;
import com.dome.sdkserver.constants.newgame.GameTypeEnum;
import com.dome.sdkserver.metadata.entity.AppVo;
import com.dome.sdkserver.metadata.entity.h5.H5Game;
import com.dome.sdkserver.service.AppService;
import com.dome.sdkserver.service.CallbackAuditService;
import com.dome.sdkserver.service.MerchantAppAuditService;
import com.dome.sdkserver.service.MerchantInfoAuditService;
import com.dome.sdkserver.service.PkgManageService;
import com.dome.sdkserver.service.RedisService;
import com.dome.sdkserver.util.PaginatorUtils;
import com.dome.sdkserver.util.business.GameUtils;
import com.dome.sdkserver.view.AjaxResult;
import com.dome.sdkserver.vo.MerchantAppVo;

/**
 * 商户应用审核controller
 */
@Controller
@RequestMapping("/merchantappaudit")
public class MerchantAppAuditController extends BaseController{
	@Resource
	private MerchantAppAuditService merchantAppAuditService;
	
	@Resource
	private MerchantInfoAuditService merchantInfoAuditService;
	
	@Resource
	private PkgManageService pkgManageServiceImpl;

	
	@Resource
	private RedisService redisServiceImpl;
	
	@Value("${async.public.key}")
	private String publicRsaKey;

    @Resource
    private CallbackAuditService callbackAuditService;

    @Autowired
    private AmqpTemplate amqpTemplate;
    
	/**
	 * 查询
	 * @param request
	 * @return
	 */
	@RequestMapping(value ="/list")
	@ResponseBody
	public AjaxResult merchantList(HttpServletRequest request, Paginator paginator,
			HttpServletResponse response) {
		//获取查询的参数
		String merchantFullName = request.getParameter("merchantFullName");
		String applyStartDate = request.getParameter("applyStartDate");
		String applyEndDate = request.getParameter("applyEndDate");
		String status = request.getParameter("status");
		String appCode = request.getParameter("appCode");
		String merchantAppName = request.getParameter("appName");
		String merchantCode = request.getParameter("merchantCode");
		//封装查询参数
		SearchMerchantAppBo searchMerchantAppBo = new SearchMerchantAppBo(merchantFullName,applyStartDate
				,applyEndDate,status,appCode,merchantAppName,merchantCode);
		int count = merchantAppAuditService.getAppInfoCountByCondition(searchMerchantAppBo);
		Map<String, Object> dataMap = new HashMap<String, Object>();
		List<MerchantAppInfo> merchantAppList = new ArrayList<MerchantAppInfo>();

		String orginalDataSource = MultipleDatasource.getDataSource();
		if (count > 0) {
			paginator=Paginator.handlePage(paginator, count, request);
			searchMerchantAppBo.setStart(paginator.getStart());
			searchMerchantAppBo.setSize(paginator.getPageSize());

			orginalDataSource = MultipleDatasource.getDataSource();
			log.info("getAppInfoByCondition前>>>orginalDataSource = "+orginalDataSource);

			List<AppVo> list = merchantAppAuditService.getAppInfoByCondition(searchMerchantAppBo);

			orginalDataSource = MultipleDatasource.getDataSource();
			log.info("getAppInfoByCondition后>>>orginalDataSource = "+orginalDataSource);

			if (!CollectionUtils.isEmpty(list)) {
				for (AppVo app : list) {
					
					// 手游情况
					String tAppCode=app.getAppCode();
					if (GameUtils.analyseGameType(tAppCode)==GameTypeEnum.mobilegame){

						orginalDataSource = MultipleDatasource.getDataSource();
						log.info("pkgManageServiceImpl.query前>>>orginalDataSource = "+orginalDataSource);

						Pkg pkg = pkgManageServiceImpl.query(tAppCode);

						orginalDataSource = MultipleDatasource.getDataSource();
						log.info("pkgManageServiceImpl.query后>>>orginalDataSource = "+orginalDataSource);


						MerchantAppVo appVo = new MerchantAppVo(app, pkg);
						// 应用查看中公钥显示的是支付回调公钥
						appVo.setPublicRsaKey(publicRsaKey);
						// 设置游戏截图
						initAppGameAttrDesc(appVo);
						merchantAppList.add(appVo);
					} else {
						app.setAppKey(app.getAppKey2());
						merchantAppList.add(app);
					}
					
				}
			}
			
		} 
		dataMap.put("totalCount", count);
		dataMap.put("appList", merchantAppList);
		return AjaxResult.success(dataMap);
	}
	
	
	private void initAppGameAttrDesc(MerchantAppVo appVo){
		String appType = appVo.getAppType();
		if (StringUtils.isEmpty(appType)) return;
		AppTypeAttrInfo appTypeAttr = redisServiceImpl.getAppTypeAttrByCode(appType);
		if (appTypeAttr != null) {
			appVo.setAppTypeName(appTypeAttr.getTypeAttrName());
		}
		if (!"10000000".equals(appType)) return;
		String gameTypeCode = appVo.getGameType();
		appTypeAttr = redisServiceImpl.getAppTypeAttrByCode(gameTypeCode);
		if (appTypeAttr != null) {
			appVo.setGameTypeName(appTypeAttr.getTypeAttrName());
		}
		String gameAttrCode = appVo.getGameAttr();
		appTypeAttr = redisServiceImpl.getAppTypeAttrByCode(gameAttrCode);
		if (appTypeAttr != null) {
			appVo.setGameAttrTypeName(appTypeAttr.getTypeAttrName());
		}
	}
	
	/**
	 * 跳转查看页面
	 * @param request
	 * @return
	 */
	@RequestMapping("/toview")
	@ResponseBody
	public AjaxResult toView(String appCode) {
		if (StringUtils.isEmpty(appCode)) {
			return AjaxResult.failed("没有提供应用编码");
		}
		try {
			MerchantAppInfo merchantAppInfo = merchantAppAuditService.queryApp(appCode);
			if (merchantAppInfo == null){
				return AjaxResult.failed("没有查询到应用");
			}
			return AjaxResult.success(merchantAppInfo);
		} catch (Exception e) {
			log.error("获取应用信息出错", e);;
		}
		
		return AjaxResult.failedSystemError();
	}
	@Autowired
	private AppService appService;
	@ResponseBody
	@RequestMapping("/updateState")
	@AppOperLogger
	public AjaxResult updateAppStatus(MerchantAppInfo app, HttpServletRequest request){
		if (app==null || StringUtils.isEmpty(app.getAppCode())){
			return AjaxResult.failed("没有提供应用编码");
		}
		if (app.getRemark() != null && app.getRemark().length() > 200){
			return AjaxResult.failed("驳回理由不能超过200个字符");
		}
		{
			// 没有提供应用状态，null解包时会有NullPointerException
			if (app.getStatus() == null) return AjaxResult.failed("没有提供应用的下一个状态");
			int status = app.getStatus();
			// 管理后台目前只能申请接入通过和驳回，测试环境和联调环境通过、测试通过和驳回、上架、下架、展示下线
			if (AppStatusEnum.notInStatus(status, AppStatusEnum.access_finish, AppStatusEnum.deny_access, AppStatusEnum.test_adjust_finish, AppStatusEnum.online_adjust_finish,
					AppStatusEnum.test_finish, AppStatusEnum.deny_test, AppStatusEnum.shelf_finish, AppStatusEnum.shelf_off, AppStatusEnum.hidden)) {
				return AjaxResult.failed("应用状态错误，status=" + status);
			}
		}
		// 业务验证
		MerchantAppInfo pastApp = appService.selectApp(app.getAppCode());
		if (pastApp == null) {
			return AjaxResult.failed("应用不存在，appCode=" + app.getAppCode());
		}
		request.setAttribute("pastStatus", pastApp.getStatus());
		pastApp.setPastStatus(pastApp.getStatus());
		// 将传递的两个参数值覆盖到pastApp
		pastApp.setStatus(app.getStatus());
		if (StringUtils.isNotEmpty(app.getRemark())){
			pastApp.setRemark(app.getRemark());
		}
		if (StringUtils.isNotEmpty(app.getShelfChannel())){
			pastApp.setShelfChannel(app.getShelfChannel());
		}
		
		String errorMsg = appRemarkValidate(app, pastApp.getStatus());
		if (errorMsg != null) return AjaxResult.failed(errorMsg);
		// 使用pastApp，减少查库
		app.setAppType(pastApp.getAppType());
		errorMsg = appShelfValidate(app);
		if (errorMsg != null) return AjaxResult.failed(errorMsg);
		try {
			GameTypeEnum em = GameUtils.analyseGameType(app.getAppCode());
            amqpTemplate.convertAndSend("openba_sny_app_to_bi",pastApp);//mq同步信息至bi报表系统
			Map<String,String> snyApp = snyAppInfo(pastApp);
			amqpTemplate.convertAndSend("openba_sny_app_info",snyApp);//以后开放平台同步信息均通过该方式同步,在对应mq监听中配置同步url即可
			switch (em){
			case yeyougame:
			{
				return updateYeyouStatus(pastApp);
			}
			case h5game: {
				 return updateH5GameStatus(pastApp);
			}
			
			default:;
			}
			errorMsg = merchantAppAuditService.updateAppStatus(pastApp);
			if (errorMsg == null || "".equals(errorMsg)) {
				return AjaxResult.success();
			}
			return AjaxResult.failed(errorMsg);
		} catch (Exception e) {
			log.error("应用后台管理页面更新应用状态出错", e);
			if (e instanceof RuntimeException) {
				return AjaxResult.failed(e.getMessage());
			}
		}
		return AjaxResult.failedSystemError();
	}

	public Map<String,String> snyAppInfo(MerchantAppInfo appInfo){
		Map<String,String> data = new HashMap<String,String>();
		data.put("merchantCode",appInfo.getMerchantCode());
		data.put("merchantFullName",appInfo.getMerchantFullName());
		data.put("appCode",appInfo.getAppCode());
		data.put("appName",appInfo.getAppName());
		data.put("status",String.valueOf(appInfo.getStatus()));
		data.put("appIcon", appInfo.getAppIcon());//游戏ICON
		log.info("同步应用信息至mq,mqkey为:openba_sny_app_info, 同步信息为:{}", JSONObject.toJSONString(data));
		return data;
	}
	
	private AjaxResult updateYeyouStatus(MerchantAppInfo app){
		String errorMsg = merchantAppAuditService.updateYeyouStatus(app);
		if (errorMsg != null) {
			return AjaxResult.failed(errorMsg);
		}
		
		return AjaxResult.success();
	}
	
	private AjaxResult updateH5GameStatus(MerchantAppInfo app){
		String errorMsg = merchantAppAuditService.updateH5GameStatus(app);
		if (errorMsg != null) {
			return AjaxResult.failed(errorMsg);
		}
		
		return AjaxResult.success();
	}
	private String appRemarkValidate(MerchantAppInfo app, int pastStatus) {
		String errorMsg = null;
		int status = app.getStatus();
		String remark = app.getRemark();
		// 接入驳回或上架驳回
		if (AppStatusEnum.inStatus(status, AppStatusEnum.deny_access, AppStatusEnum.deny_test)) {
			if (StringUtils.isEmpty(remark)){
				errorMsg = "没有填写驳回理由";
			}
		} else if (status == AppStatusEnum.access_finish.getStatus()){ // 测试环境和上线环境联调驳回，下一个状态为已接入
			if (AppStatusEnum.inStatus(pastStatus, AppStatusEnum.test_adjust, AppStatusEnum.online_adjust)) {
				if (StringUtils.isEmpty(remark)){
					errorMsg = "没有填写驳回理由";
				}
			}
		}
		
		return errorMsg;
	}
	private String appShelfValidate(MerchantAppInfo app) {
		String errorMsg = null;
		int status = app.getStatus();
		if (status == AppStatusEnum.shelf_finish.getStatus()) {
			if (StringUtils.isEmpty(app.getShelfChannel())){
				errorMsg = "没有选择上架渠道";
			} else {
				boolean hasChannel = false;
				String[] channels = app.getShelfChannel().split(",");
				for (String channel : channels) {
					if (StringUtils.isEmpty(channel)) continue;
					if (channel.equals(AppChannelEnum.qb.getType()) || channel.equals(AppChannelEnum.baowan.getType())){
						
					} else {
						errorMsg = "上架渠道错误，channel=" + channel;
						break;
					}
					hasChannel = true;
				}
				if (!hasChannel) {
					return "没有选择上架渠道，channels=" + app.getShelfChannel();
				}
			}
			// 网站应用和移动应用，若没有上传包体，不允许上架。手游游戏需要上传包体，其他不需要
			GameTypeEnum em = GameUtils.analyseGameType(app.getAppCode());
			if (!AppTypeConstant.APP_TYPE_GAME.equals(app.getAppType())
					&&(em==GameTypeEnum.mobilegame)){
				Pkg pkg = pkgManageServiceImpl.query(app.getAppCode());
				String appType = "\"游戏\"";
				if (AppTypeConstant.APP_TYPE_MOBILEAPPLICATION.equals(app.getAppType())){
					appType = "\"移动应用\"";
				} else if (AppTypeConstant.APP_TYPE_WEBAPPLICATION.equals(app.getAppType())){
					appType = "\"网站应用\"";
				}
				if (pkg == null) {
					errorMsg = appType + "，合作伙伴没有上传过包体";
				}
			}
			
		}
		
		return errorMsg;
	}
	
	/**
	 * 修改登录和支付回调地址
	 * @param param
	 * @return
	 */
	@RequestMapping("/modifyUrl")
	@ResponseBody
	public AjaxResult modifyCallbackUrl(MerchantAppInfo param, HttpServletRequest request){
		MerchantAppInfo app = new MerchantAppInfo();
		String appCode = param.getAppCode();
		if (StringUtils.isEmpty(appCode)){
			return AjaxResult.failed("缺少appCode参数");
		}
		if (GameUtils.analyseGameType(appCode)!=GameTypeEnum.mobilegame){
			return AjaxResult.failed("修改回调地址功能仅针对手游，页游和H5不能使用");
		}
		app.setAppCode(appCode);
		boolean needModify = false;
		String callBackUrl = param.getLoginCallBackUrl();
		if (callBackUrl != null && !"".equals(callBackUrl)){
			app.setLoginCallBackUrl(callBackUrl);
			needModify = true;
		}
		callBackUrl = param.getTestLoginCallBackUrl();
		if (callBackUrl != null && !"".equals(callBackUrl)){
			app.setTestLoginCallBackUrl(callBackUrl);
			needModify = true;
		}
		callBackUrl = param.getPayCallBackUrl();
		if (callBackUrl != null && !"".equals(callBackUrl)){
			app.setPayCallBackUrl(callBackUrl);
			needModify = true;
		}
		callBackUrl = param.getTestPayCallBackUrl();
		if (callBackUrl != null && !"".equals(callBackUrl)){
			app.setTestPayCallBackUrl(callBackUrl);
			needModify = true;
		}
		if (!needModify) {
			return AjaxResult.failed("缺少回调地址参数，参数名分别为loginCallBackUrl、payCallBackUrl、testLoginCallBackUrl、testPayCallBackUrl");
		}
		String ip =IPUtil.getIpAddr(request);
		this.addUserInfo(app, request);
		// IP仅保存在修改记录备案中
		app.setRemark(ip);
		int line = merchantAppAuditService.modfiyCallbackUrl(app);
		if (line ==1) return AjaxResult.success();
		return AjaxResult.failed("修改登录和支付回调地址不成功");
	}


    /**
     * url修改审批查看修改回调地址 ,根据id为空时查看一条记录的回调地址 ,id不为空时查看申请记录(排序为时间降序)
     * @param callbackAudit
     * @param request
     * @return
     */
    @RequestMapping("/viewCallbackUrl")
    @ResponseBody
    public AjaxResult viewCallbackUrl(CallbackAudit callbackAudit ,HttpServletRequest request){
        try{
            Map<String,Object> data = new HashMap<String,Object>();
            //判断appCode是否为空
            if(callbackAudit.getId() != null){
                //根据id查看当前记录修改的url
                Integer id = callbackAudit.getId();
                //根据id只能查到一条记录,list中只有一个元素
                CallbackAudit ca = callbackAuditService.queryById(id);
                if(ca == null){
                    return AjaxResult.failed("没有此记录");
                }
                data.put("loginCallbackUrl",ca.getLoginCallbackUrl());
                data.put("payCallbackUrl",ca.getPayCallbackUrl());
                data.put("testLoginCallbackUrl",ca.getTestLoginCallbackUrl());
                data.put("testPayCallbackUrl",ca.getTestPayCallbackUrl());
                data.put("registCallBackUrl",ca.getRegistCallbackUrl());
                data.put("testRegistCallBackUrl",ca.getTestRegistCallbackUrl());
                data.put("gameUrl",ca.getGameUrl());
                return AjaxResult.success(data);
            }else{
                //判断pageNo 和pageSize 是否为空
                if( request.getParameter("pageNo") == null || request.getParameter("pageSize") ==null ){
                    return AjaxResult.failed("缺少参数");
                }
                //总数
                int count = callbackAuditService.countCallbackAudit(callbackAudit);
                PaginatorUtils paginatorUtils = new PaginatorUtils(Integer.valueOf(request.getParameter("pageSize")));
                int begin = PaginatorUtils.getStart(paginatorUtils.executePage(request,count));
                //查看申请修改url列表,展示还未通过申请和已经通过申请的,驳回的不展示
                List<CallbackAudit> result = callbackAuditService.queryCallbackAudit(callbackAudit, begin, Integer.valueOf(request.getParameter("pageSize")));
                List<Map<String,Object>> list = new ArrayList<Map<String,Object>>();
                for(CallbackAudit ca : result){
                    Map<String,Object> map = new HashMap<String,Object>();
                    map.put("id",ca.getId());
                    map.put("appCode",ca.getAppCode());
                    map.put("appName",ca.getAppName());
                    //申请时间
                    map.put("applyTime",ca.getCreateTime());
                    map.put("status",ca.getStatus());
                    map.put("statusDesc",ca.getStatus()==0?"未审核":"通过");
                    map.put("loginCallbackUrl" ,ca.getLoginCallbackUrl());
                    map.put("payCallbackUrl" ,ca.getPayCallbackUrl());
                    map.put("testLoginCallbackUrl" ,ca.getTestLoginCallbackUrl());
                    map.put("testPayCallbackUrl" ,ca.getTestPayCallbackUrl());
                    map.put("registCallBackUrl", ca.getRegistCallbackUrl());
                    map.put("testRegistCallBackUrl", ca.getTestRegistCallbackUrl());
                    map.put("gameUrl",ca.getGameUrl());
                    list.add(map);
                }
                data.put("totalCount",count);
                data.put("list",list);
                return AjaxResult.success(data);
            }
        }catch (Exception e){
            log.error("查询回调地址失败",e);
        }
        return AjaxResult.failed("查询回调地址失败");
    }



    /**
     * 手游,页游,H5后台审核回调地址 , handel为pass表示通过审核并修改回调地址, handel为reject表示驳回并将记录删除状态设置为删除状态
     * @param callbackAudit
     * @param handle
     * @return
     */
    @RequestMapping("/callbackUrlAudit")
    @ResponseBody
    public AjaxResult callbackAudit(CallbackAudit callbackAudit , String handle) {
        CallbackAudit audit = null;
        try {
            String appCode = callbackAudit.getAppCode();
            if(StringUtils.isEmpty(appCode) || StringUtils.isEmpty(handle)){
                return AjaxResult.failed("缺少参数");
            }
            //验证appCode是否存在
            audit = callbackAuditService.queryByAppCode(appCode);
            if(audit == null){
                return AjaxResult.failed("该条记录不存在");
            }
            //该条记录已经被审核通过了,不能再被修改
            if(audit.getStatus() == 1){
                return AjaxResult.failed("该条记录不存在");
            }

            //通过appCode查询Merchan对象(手游,H5,页游)
            Object obj = callbackAuditService.queryAllByAppCode(appCode);
            if(obj instanceof MerchantAppInfo){//手游,页游
                MerchantAppInfo app = null;
				app =(MerchantAppInfo) obj;


                if(appCode.startsWith("Y")){
                    //页游
                    ((MerchantAppInfo) obj).setPayCallBackUrl(audit.getPayCallbackUrl());
                    // 增加登录回调地址
                    ((MerchantAppInfo) obj).setLoginCallBackUrl(audit.getLoginCallbackUrl());
					if(app.getStatus() != AppStatusEnum.shelf_finish.getStatus()){
						((MerchantAppInfo) obj).setStatus(0);
					}
                } else {
                    //手游
                    ((MerchantAppInfo)obj).setPayCallBackUrl(audit.getPayCallbackUrl());
                    ((MerchantAppInfo)obj).setTestPayCallBackUrl(audit.getTestPayCallbackUrl());
                    ((MerchantAppInfo)obj).setLoginCallBackUrl(audit.getLoginCallbackUrl());
                    ((MerchantAppInfo)obj).setTestLoginCallBackUrl(audit.getTestLoginCallbackUrl());
                    ((MerchantAppInfo)obj).setRegistCallBackUrl(audit.getRegistCallbackUrl());
                    ((MerchantAppInfo)obj).setTestRegistCallBackUrl(audit.getTestRegistCallbackUrl());
                }
            }else{
                //H5
                ((H5Game)obj).setAppUrl(audit.getGameUrl());
                ((H5Game)obj).setPayCallBackUrl(audit.getPayCallbackUrl());
            }
            //通过--pass  驳回--reject
            if ("pass".equals(handle)) {
                //更新状态并修改游戏的回调地址
                callbackAuditService.updateStatusAndCallbackUrl(audit ,true);
                //同步到sdk库中
                String errMsg = merchantAppAuditService.syncCallbackUrl(obj);
                if( !StringUtils.isEmpty(errMsg)){
                    log.error(errMsg);
                  throw new RuntimeException(errMsg);
                }
            }else if ("reject".equals(handle)) {
                //更新为删除
                callbackAuditService.updateDelFlagAndCallbackUrl(callbackAudit);
            }else {
                return AjaxResult.failed("非法操作");
            }
            return AjaxResult.success();
        }catch (Exception e){
            log.error("URL修改审批操作失败",e);
            if("pass".equals(handle)){
                callbackAuditService.updateStatusAndCallbackUrl(audit , false);
            }
        }
        return AjaxResult.failed("URL修改审批操作失败");
    }

}
