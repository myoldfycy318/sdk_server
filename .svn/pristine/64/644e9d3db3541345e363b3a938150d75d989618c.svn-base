package com.dome.sdkserver.controller;

import com.alibaba.fastjson.JSONObject;
import com.dome.sdkserver.bq.enumeration.AccessTypeEnum;
import com.dome.sdkserver.bq.enumeration.ErrorCodeEnum;
import com.dome.sdkserver.bq.util.DateUtils;
import com.dome.sdkserver.bq.util.IPUtil;
import com.dome.sdkserver.bq.util.PageDto;
import com.dome.sdkserver.bq.view.SdkOauthResult;
import com.dome.sdkserver.constants.DomeSdkRedisKey;
import com.dome.sdkserver.metadata.entity.BiReportLogEntity;
import com.dome.sdkserver.metadata.entity.bq.login.OauthAccessRecordEntity;
import com.dome.sdkserver.metadata.entity.bq.pay.AppInfoEntity;
import com.dome.sdkserver.service.game.GameService;
import com.dome.sdkserver.service.login.IdCardService;
import com.dome.sdkserver.service.login.OauthAccessRecordService;
import com.dome.sdkserver.service.redis.RedisService;
import com.dome.sdkserver.util.RedisUtil;
import com.dome.sdkserver.web.response.ResponseCode;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.Validator;
import javax.validation.groups.Default;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Set;

public abstract class BaseController {

    protected final Logger log = LoggerFactory.getLogger(this.getClass());

    protected final Logger qbaoLoginLogger = LoggerFactory.getLogger("qbaoLogin");
    //h5 页游 激活 = 注册数
    protected final Logger h5HandGameActivate = LoggerFactory.getLogger("h5HandGameActivate");
    // h5 页游 活跃
    protected final Logger h5HandGameLogin = LoggerFactory.getLogger("h5HandGameLogin");

    /**
     * 校验器
     **/
    protected static Validator validator = Validation.buildDefaultValidatorFactory().getValidator();

    @Autowired
    protected RedisUtil redisUtil;

    @Autowired
    protected RedisService redisService;

    @Autowired
    private OauthAccessRecordService oauthAccessRecordService;

    @Resource(name = "gameService")
    protected GameService gameService;

    @Resource
    private IdCardService idCardService;

    protected String getCurrentUsername() {
        String username = "";
        SecurityContext context = SecurityContextHolder.getContext();

        if (context == null) {
            return username;
        }

        Authentication authentication = context.getAuthentication();
        if (authentication != null) {
            Object principal = authentication.getPrincipal();
            if (principal instanceof UserDetails) {
                username = ((UserDetails) principal).getUsername();
            }
        }
        return username;

    }

    public SdkOauthResult parserUcResponse(JSONObject response) {
        if (response == null) {
            return SdkOauthResult.failed(ErrorCodeEnum.请求uc失败.code, ErrorCodeEnum.请求uc失败.name());
        }
        int responseCode = response.getIntValue("code");
        if (responseCode == ResponseCode.SUCESS || responseCode == ResponseCode.SEND_SMS_SUCESS) {
            return SdkOauthResult.success(response.get("data"));
        } else if (responseCode == -7 || responseCode == -14 || responseCode == -15 || responseCode == -16 || responseCode == -56) { //需要图形验证码
            if (response.getJSONObject("data") != null && response.getJSONObject("data").getBoolean("needCaptcha"))
                return SdkOauthResult.failed(ErrorCodeEnum.图形验证码标识.code, response.getString("message"));
        }
        return SdkOauthResult.failed(responseCode, response.getString("message"));
    }

    /**
     * 校验客户端应用信息
     *
     * @param appCode 应用编码
     * @return
     */
    protected SdkOauthResult checkClient(String appCode) {
        if (StringUtils.isBlank(appCode)) {
            return SdkOauthResult.failed(ErrorCodeEnum.appCode为空.code, ErrorCodeEnum.appCode为空.name());
        }
        AppInfoEntity clientDetails = gameService.getAppInfo(appCode);
        if (clientDetails == null) {
            return SdkOauthResult.failed(ErrorCodeEnum.无效的appCode.code, ErrorCodeEnum.无效的appCode.name());
        }

        return SdkOauthResult.success(clientDetails);
    }

    public OauthAccessRecordEntity createAccessRecordEntity(HttpServletRequest request, int requestUrlType, String userId, String userName, String loginType) {
        OauthAccessRecordEntity accessRecordEntity = new OauthAccessRecordEntity();
        int _accessType = 0;
        try {
            String accessType = request.getParameter("accessType");
            _accessType = StringUtils.isBlank(accessType) ? AccessTypeEnum.WAP.f : Integer.parseInt(accessType);
        } catch (Exception e) {
        }
        accessRecordEntity.setAccessType(_accessType);
        accessRecordEntity.setClientId(request.getParameter("appCode"));
        accessRecordEntity.setCurMonth(DateUtils.getCurDateFormatStr(DateUtils.DEFAULT_CUR_MONTH_FORMAT));
        accessRecordEntity.setRequestUrlType(requestUrlType);
        if (!StringUtils.isEmpty(userId)) {
            accessRecordEntity.setUserId(userId);
        }
        if (!StringUtils.isEmpty(userName)) {
            accessRecordEntity.setUserName(userName);
        }
        accessRecordEntity.setOsVersion(request.getParameter("osVersion"));
        accessRecordEntity.setMobileType(request.getParameter("mobileType"));
        accessRecordEntity.setAccessIp(IPUtil.getIpAddr(request));
        accessRecordEntity.setLoginType(loginType);
        accessRecordEntity.setLoginChannelCode(request.getParameter("channelCode"));
        oauthAccessRecordService.addOauthAccessRecord(accessRecordEntity);
        return accessRecordEntity;
    }

    /**
     * 数据校验
     *
     * @param obj
     * @return
     */
    protected <T> String dataValid(T obj) {
        Set<ConstraintViolation<T>> set = validator.validate(obj, Default.class);
        StringBuilder errorMsg = new StringBuilder();
        if ((null != set) && (0 != set.size())) {
            for (ConstraintViolation<T> violation : set) {
                errorMsg.append("," + violation.getMessage());
            }
        }
        String customerMsg = this.customerValid(obj); // 自定义校验器
        if (org.apache.commons.lang.StringUtils.isNotEmpty(customerMsg)) {
            errorMsg.append("," + customerMsg);
        }
        if (org.apache.commons.lang.StringUtils.isNotEmpty(errorMsg.toString())) {
            return errorMsg.substring(1);
        }
        return null;
    }

    /**
     * 自定义校验
     *
     * @return
     */
    protected <T> String customerValid(T obj) {
        return null;
    }

    @InitBinder
    protected void initBinder(WebDataBinder binder) {
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        dateFormat.setLenient(true);
        binder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, true));
    }

    /**
     * 封装请求参数
     *
     * @param request
     * @param pageDto
     */
    protected void encapsulatePageParams(HttpServletRequest request, PageDto pageDto) {
        String isPage = request.getParameter("isPage");
        if (StringUtils.isNotBlank(isPage) && "true".equals(isPage)) {
            String pageNo = request.getParameter("pageNo");
            String pageSize = request.getParameter("pageSize");
            pageDto.setIsPage(true);
            if (!StringUtils.isBlank(pageNo)) {
                pageDto.setPageNo(Integer.valueOf(pageNo));
            }
            if (!StringUtils.isBlank(pageSize)) {
                pageDto.setPageSize(Integer.valueOf(pageSize));
            }
        }
    }

    /**
     * 沉迷信息 放沉迷
     *
     * @param idCradNo 身份证号
     * @return
     */
    public boolean isAdult(String idCradNo) {
        log.info("isAdult验证是否成年,idCradNo={},是否开启实名:{}", idCradNo, idCardService.isNRealName());
        //没有开启实名认证 默认已成年
        if (!idCardService.isNRealName())
            return true;
        if (StringUtils.isBlank(idCradNo))
            return false;
        String year = "";
        String yue = "";
        if (idCradNo.length() == 18) {
            year = idCradNo.substring(6, 10);
            yue = idCradNo.substring(10, 12);
        }
        if (idCradNo.length() == 15) {
            year = "19" + idCradNo.substring(6, 8);// 年份
            yue = idCradNo.substring(8, 10);// 月份
        }
        Date date = new Date();// 得到当前的系统时间
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        String fyear = format.format(date).substring(0, 4);// 当前年份
        String fyue = format.format(date).substring(5, 7);// 月份
        int age = 0;
        if (Integer.parseInt(yue) <= Integer.parseInt(fyue)) { // 当前月份大于用户出身的月份表示已过生
            age = Integer.parseInt(fyear) - Integer.parseInt(year) + 1;
        } else {// 当前用户还没过生
            age = Integer.parseInt(fyear) - Integer.parseInt(year);
        }
        log.info("isAdult验证是否成年,age={}", age);
        return age >= 18;
    }


    /**
     * BI 报表需求 记录login日志
     */
    protected void buildBiLoginLog(String appCode, String channelCode, String sysType, String userId) {
        BiReportLogEntity biReportLogEntity = new BiReportLogEntity();
        biReportLogEntity.setDataTime(new Date());
        biReportLogEntity.setUserId(userId);
        biReportLogEntity.setAppCode(appCode);
        biReportLogEntity.setChannelId(channelCode);
        biReportLogEntity.setSysType(sysType);

        String key = appCode + "_" + userId;
        if (!redisUtil.sismembers(DomeSdkRedisKey.H5_HAND_GAME_ACTIVATE_KEY, key)) {
            redisUtil.sset(DomeSdkRedisKey.H5_HAND_GAME_ACTIVATE_KEY, key);
            h5HandGameActivate.info(JSONObject.toJSONString(biReportLogEntity));
        }
        h5HandGameLogin.info(JSONObject.toJSONString(biReportLogEntity));
    }


}
