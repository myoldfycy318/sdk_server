package com.dome.sdkserver.biz.executor;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.dome.sdkserver.bq.util.DateUtils;
import com.dome.sdkserver.metadata.entity.bq.pay.OrderEntity;
import com.dome.sdkserver.service.order.OrderService;
import com.dome.sdkserver.util.ApiConnector;
import org.apache.commons.io.IOUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.BufferedInputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

/**
 * 页游支付宝支付成功后异步通知
 * MerchantPayNotifyThread
 *
 * @author Zhang ShanMin
 * @date 2016/7/8
 * @time 15:43
 */
public class WebpageGamePayNotifyThread implements Runnable {

    private static final Logger logger = LoggerFactory.getLogger(WebpageGamePayNotifyThread.class);

    private OrderEntity orderEntity;
    private OrderService orderService;
    private static Properties properties = new Properties();

    static {
        InputStream in = null;
        try {
            logger.error("页游通知加载domain.properties.....");
            String filePath = "/domain.properties";
            in = WebpageGamePayNotifyThread.class.getResourceAsStream(filePath);
            if (in == null) {
                logger.info("domain.properties not found");
            } else {
                if (!(in instanceof BufferedInputStream)) {
                    in = new BufferedInputStream(in);
                }
                properties.load(in);
            }
        } catch (Exception e) {
            logger.error("页游通知加载domain.properties异常", e);
        } finally {
            IOUtils.closeQuietly(in);
        }
    }


    public WebpageGamePayNotifyThread(OrderEntity orderEntity, Object object) {
        this.orderEntity = orderEntity;
        this.orderService = (OrderService) object;

    }

    @Override
    public void run() {
        try {
            List<NameValuePair> pairs = new ArrayList<NameValuePair>();
            pairs.add(new BasicNameValuePair("userId", orderEntity.getBuyerId()));
            pairs.add(new BasicNameValuePair("zoneId", JSONObject.parseObject(orderEntity.getExtraField()).getString("zoneId")));
            pairs.add(new BasicNameValuePair("orderNo", orderEntity.getOrderNo()));
            if ("1".equals(properties.getProperty("webgame.cost.manage", "1"))) {
                pairs.add(new BasicNameValuePair("price", String.valueOf(orderEntity.getChargePointAmount())));
            } else {
                //测试环境支付金额x100
                pairs.add(new BasicNameValuePair("price", String.valueOf(orderEntity.getChargePointAmount() * 100)));
            }
            String res = ApiConnector.post(orderEntity.getPayNotifyUrl(), pairs);
            logger.info("页游支付宝支付通知,请求url:{},请求参数:{},响应结果:{}", orderEntity.getPayNotifyUrl(), pairs, res);
            JSONObject jsonObject = JSONObject.parseObject(res);
            if (jsonObject != null && StringUtils.isNotBlank(jsonObject.getString("code")) && "0".equals(jsonObject.getString("code"))) {
                String extraField = orderEntity.getExtraField();
                jsonObject = StringUtils.isBlank(extraField) ? null : (JSONObject.parseObject(res) == null ? null : JSONObject.parseObject(extraField));
                if (jsonObject == null)
                    return;
                jsonObject.put("webgame", "paid");
                orderEntity.setExtraField(JSON.toJSONString(jsonObject));
                orderService.updateOrderInfo(orderEntity, DateUtils.getCurDateFormatStr(DateUtils.DEFAULT_CUR_MONTH_FORMAT));
            }
        } catch (Exception e) {
            logger.error("页游支付宝支付通知异常", e);
        }
    }
}
