package com.dome.sdkserver.metadata.entity.bq.ogp;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.parser.Feature;
import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;

/**
 * Created by hunsy on 2017/9/15.
 */
public class OgpReqEntity {

    private int game_id;
    private String user_id;
    private String ts;
    private String content;
    private String detail;
    private String attach;
    private String cp_trade_no;
    private String cp_trade_time;
    private String currency = "CNY";
    private int total_fee = 0;
    private String cp_notify_url;
    private String sign;


    public int getGame_id() {
        return game_id;
    }

    public void setGame_id(int game_id) {
        this.game_id = game_id;
    }

    public String getUser_id() {
        return user_id;
    }

    public void setUser_id(String user_id) {
        this.user_id = user_id;
    }

    public String getTs() {
        return ts;
    }

    public void setTs(String ts) {
        this.ts = ts;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public String getDetail() {
        return detail;
    }

    public void setDetail(String detail) {
        this.detail = detail;
    }

    public String getAttach() {
        return attach;
    }

    public void setAttach(String attach) {
        this.attach = attach;
    }

    public String getCp_trade_no() {
        return cp_trade_no;
    }

    public void setCp_trade_no(String cp_trade_no) {
        this.cp_trade_no = cp_trade_no;
    }

    public String getCp_trade_time() {
        return cp_trade_time;
    }

    public void setCp_trade_time(String cp_trade_time) {
        this.cp_trade_time = cp_trade_time;
    }

    public String getCurrency() {
        return currency;
    }

    public void setCurrency(String currency) {
        this.currency = currency;
    }

    public int getTotal_fee() {
        return total_fee;
    }

    public void setTotal_fee(int total_fee) {
        this.total_fee = total_fee;
    }

    public String getCp_notify_url() {
        return cp_notify_url;
    }

    public void setCp_notify_url(String cp_notify_url) {
        this.cp_notify_url = cp_notify_url;
    }

    public String getSign() {
        return sign;
    }

    public void setSign(String sign) {
        this.sign = sign;
    }

    private Logger logger = LoggerFactory.getLogger(getClass());

    /**
     * @param key ogp的Key
     * @return
     */
    public String ogpSign(String key) {

        return sign;
    }

    public Map<String, String> getParams(String key) {

        String str = JSON.toJSONString(this);
        Map<String, String> map = JSON.parseObject(str, Map.class, Feature.SortFeidFastMatch);
        map.remove("sign");
//        Iterator<String> ite = map.keySet().iterator();
//
//        Map<String, String> params = new HashMap<>();
//        while (ite.hasNext()) {
//            String mkey = ite.next();
//            if (map.get(mkey) instanceof String) {
//                if (StringUtils.isNotEmpty(map.get(key))) {
//                    params.put(mkey, map.get(map));
//                }
//            } else {
//                params.put(mkey, map.get(mkey));
//            }
//        }

        List<String> ls = new ArrayList<>(map.keySet());
        Collections.sort(ls);
        StringBuilder sb = new StringBuilder();
        for (String mkey : ls) {
            Object val = map.get(mkey);
            if (val instanceof Integer) {
                val = String.valueOf(val);
                sb.append(mkey).append("=").append(val).append("&");
            } else {
                if (StringUtils.isNotEmpty(String.valueOf(val))) {
                    sb.append(mkey).append("=").append(val).append("&");
                } else {
                    map.remove(mkey);
                }
            }
        }
        String signBf = sb.toString() + "key=" + key;
        logger.info("ogp签名前:{}", signBf);
        String sign = DigestUtils.md5Hex(signBf).toUpperCase();
        logger.info("ogp签名后:{}", sign);
        map.put("sign", sign);
        logger.info("ogp请求参数:{}", JSON.toJSONString(map));
        return map;
    }

}
