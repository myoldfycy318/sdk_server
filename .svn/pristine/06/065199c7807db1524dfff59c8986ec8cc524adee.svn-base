package com.dome.sdkserver.util;

import javax.crypto.Cipher;
import java.security.*;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.HashMap;
import java.util.Map;

/**
 * RSA安全编码组件
 * 
 * @author 梁栋
 * @version 1.0
 * @since 1.0
 */
public abstract class RSACoder extends Coder {
	public static final String KEY_ALGORITHM = "RSA";
	public static final String SIGNATURE_ALGORITHM = "MD5withRSA";

	public static final String PUBLIC_KEY = "RSAPublicKey";
	public static final String PRIVATE_KEY = "RSAPrivateKey";

	/**
	 * 用私钥对信息生成数字签名
	 * 
	 * @param data
	 *            加密数据
	 * @param privateKey
	 *            私钥
	 * 
	 * @return
	 * @throws Exception
	 */
	public static String sign(byte[] data, String privateKey) throws Exception {
		// 解密由base64编码的私钥
		byte[] keyBytes = decryptBASE64(privateKey);

		// 构造PKCS8EncodedKeySpec对象
		PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(keyBytes);

		// KEY_ALGORITHM 指定的加密算法
		KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);

		// 取私钥匙对象
		PrivateKey priKey = keyFactory.generatePrivate(pkcs8KeySpec);

		// 用私钥对信息生成数字签名
		Signature signature = Signature.getInstance(SIGNATURE_ALGORITHM);
		signature.initSign(priKey);
		signature.update(data);

		return encryptBASE64(signature.sign());
	}

	/**
	 * 校验数字签名
	 * 
	 * @param data
	 *            加密数据
	 * @param publicKey
	 *            公钥
	 * @param sign
	 *            数字签名
	 * 
	 * @return 校验成功返回true 失败返回false
	 * @throws Exception
	 * 
	 */
	public static boolean verify(byte[] data, String publicKey, String sign)
			throws Exception {

		// 解密由base64编码的公钥
		byte[] keyBytes = decryptBASE64(publicKey);

		// 构造X509EncodedKeySpec对象
		X509EncodedKeySpec keySpec = new X509EncodedKeySpec(keyBytes);

		// KEY_ALGORITHM 指定的加密算法
		KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);

		// 取公钥匙对象
		PublicKey pubKey = keyFactory.generatePublic(keySpec);

		Signature signature = Signature.getInstance(SIGNATURE_ALGORITHM);
		signature.initVerify(pubKey);
		signature.update(data);

		// 验证签名是否正常
		return signature.verify(decryptBASE64(sign));
	}

	/**
	 * 解密<br>
	 * 用私钥解密
	 * 
	 * @param data
	 * @param key
	 * @return
	 * @throws Exception
	 */
	public static byte[] decryptByPrivateKey(byte[] data, String key)
			throws Exception {
		// 对密钥解密
		byte[] keyBytes = decryptBASE64(key);

		// 取得私钥
		PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(keyBytes);
		KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);
		Key privateKey = keyFactory.generatePrivate(pkcs8KeySpec);

		// 对数据解密
		Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());
		cipher.init(Cipher.DECRYPT_MODE, privateKey);

		return cipher.doFinal(data);
	}

	/**
	 * 解密<br>
	 * 用公钥解密
	 * 
	 * @param data
	 * @param key
	 * @return
	 * @throws Exception
	 */
	public static byte[] decryptByPublicKey(byte[] data, String key)
			throws Exception {
		// 对密钥解密
		byte[] keyBytes = decryptBASE64(key);

		// 取得公钥
		X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(keyBytes);
		KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);
		Key publicKey = keyFactory.generatePublic(x509KeySpec);

		// 对数据解密
		Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());
		cipher.init(Cipher.DECRYPT_MODE, publicKey);

		return cipher.doFinal(data);
	}

	/**
	 * 加密<br>
	 * 用公钥加密
	 * 
	 * @param data
	 * @param key
	 * @return
	 * @throws Exception
	 */
	public static byte[] encryptByPublicKey(byte[] data, String key)
			throws Exception {
		// 对公钥解密
		byte[] keyBytes = decryptBASE64(key);

		// 取得公钥
		X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(keyBytes);
		KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);
		Key publicKey = keyFactory.generatePublic(x509KeySpec);

		// 对数据加密
		Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());
		cipher.init(Cipher.ENCRYPT_MODE, publicKey);

		return cipher.doFinal(data);
	}

	/**
	 * 加密<br>
	 * 用私钥加密
	 * 
	 * @param data
	 * @param key
	 * @return
	 * @throws Exception
	 */
	public static byte[] encryptByPrivateKey(byte[] data, String key)
			throws Exception {
		// 对密钥解密
		byte[] keyBytes = decryptBASE64(key);

		// 取得私钥
		PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(keyBytes);
		KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);
		Key privateKey = keyFactory.generatePrivate(pkcs8KeySpec);

		// 对数据加密
		Cipher cipher = Cipher.getInstance(keyFactory.getAlgorithm());
		cipher.init(Cipher.ENCRYPT_MODE, privateKey);

		return cipher.doFinal(data);
	}

	/**
	 * 取得私钥
	 * 
	 * @param keyMap
	 * @return
	 * @throws Exception
	 */
	public static String getPrivateKey(Map<String, Object> keyMap)
			throws Exception {
		Key key = (Key) keyMap.get(PRIVATE_KEY);

		return encryptBASE64(key.getEncoded());
	}

	/**
	 * 取得公钥
	 * 
	 * @param keyMap
	 * @return
	 * @throws Exception
	 */
	public static String getPublicKey(Map<String, Object> keyMap)
			throws Exception {
		Key key = (Key) keyMap.get(PUBLIC_KEY);

		return encryptBASE64(key.getEncoded());
	}

	/**
	 * 初始化密钥
	 * 
	 * @return
	 * @throws Exception
	 */
	public static Map<String, Object> initKey() throws Exception {
		KeyPairGenerator keyPairGen = KeyPairGenerator
				.getInstance(KEY_ALGORITHM);
		
		keyPairGen.initialize(1024);

		KeyPair keyPair = keyPairGen.generateKeyPair();

		// 公钥
		RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();

		// 私钥
		RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();

		Map<String, Object> keyMap = new HashMap<String, Object>(2);

		keyMap.put(PUBLIC_KEY, publicKey);
		keyMap.put(PRIVATE_KEY, privateKey);
		return keyMap;
	}
	
	
	/**
	 * 初始化密钥
	 * 
	 * @return
	 * @throws Exception
	 */
	public static Map<String, String> generateKey() throws Exception {
		KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(KEY_ALGORITHM);
		
		keyPairGen.initialize(1024);

		KeyPair keyPair = keyPairGen.generateKeyPair();

		// 公钥
		RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();

		// 私钥
		RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();

		Map<String, String> keyMap = new HashMap<String, String>(2);
		
		keyMap.put(PUBLIC_KEY, encryptBASE64(publicKey.getEncoded()));
		keyMap.put(PRIVATE_KEY, encryptBASE64(privateKey.getEncoded()));
		
		return keyMap;
	}

    public static void main(String[] args) throws Exception{

//        Map<String, String> keyMap = generateKey();
//        System.out.println("PUBLIC_KEY="+keyMap.get(PUBLIC_KEY));
//        System.out.println("---------------------------------------");
//        System.out.println("PUBLIC_KEY="+keyMap.get(PRIVATE_KEY));

//        appcodeSign();
        verifySign();
    }

    public static void appcodeSign() throws Exception{
        String rsaPrivate ="MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBALU1TpBPghZ3zKIODN/oMUMt444gkrQ4Eu/uLKQu8WFlsXrfpXdmDV8La9RFRtaSO5PpdhYWqCo40O+rJOIZUt9qSUyAuCC3KD3w9+hqnKJndXNvK5/0Dq+u8mfsTpJm2D72E7d/tgYKxNZ02cJ0M0hM02dLsDeEt7vhYlohnGczAgMBAAECgYBAppIvHo7VIUzbDJQ/VoIs67RiQvDUZ6UqARngQfdQvo2Bv0Uzwi9HF7YS99x8NZQYA5Vj8BVzau3wdGkmWc6c2VcjMFIqQ0Ar3XUpVoEFyh5Z+eDRCl4Jkm004U3aQdgDpWbcg4txo9OgsSJz+9hFhPxVP4l7XlwnJRRAi8lKEQJBAOJ4PNtbZjBZv0pJmSjDTWTfpZeRriihZEdeE9MzxoisGf+yT6zzY+ATzQBhWqWnEp4UrJekeKoFQKlw78XPJbcCQQDM1jN/YK+EyY4+9u8RCUMFH6rvgR/8F7L5JLRJbHpIQuaxdujWSUQrjbYKTNyUzVEmWV1bZeiBJJfNgeWu4aplAkAnDT7JQKCFc+Rlhf1wJwVggKRIV6mlffcRy2o1wDba+HpfOjs9ApdVW3S9PQxphj7SnZQJbiYUg2VcEop2HLtPAkEAuJomyRoitKJNPvOeWpUlQF3c2IJfh/r3wc9RZ4aK4crhS3hluJFJDZNmRvwkIzqycsRA/ZjnJFQNNxllHOmlfQJAG+e4SxBM3WIGUEQf8jP+fYvlA8FhQ0RQJ47Gp6hqrOjAAS1vhEs/h/ufLpOXBu+3nj/pPaqJypnE6eMvdwZd4Q==";
        String rsaPublic ="MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC1NU6QT4IWd8yiDgzf6DFDLeOOIJK0OBLv7iykLvFhZbF636V3Zg1fC2vURUbWkjuT6XYWFqgqONDvqyTiGVLfaklMgLggtyg98PfoapyiZ3Vzbyuf9A6vrvJn7E6SZtg+9hO3f7YGCsTWdNnCdDNITNNnS7A3hLe74WJaIZxnMwIDAQAB";
        String appCode ="A0001182";
        String signCode =  RSACoder.sign(appCode.getBytes(), rsaPrivate);
        System.out.println("signCode:\n"+signCode);

    }

    public static void verifySign()throws Exception{
        String rsaPublic ="MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDIAt5u+adjWIi7hVA9pKGGjNQKNFeyaDgG59rwUAANREkzkYJtRrj5TtiqUKy+695QAfcowRv0u02QTTw1FBTubVxkEb2aOmHaYWV+KG73ZfcA3PdcgcuoD/ToW57JmtNC5f+dNOTJWzpaK8WZzoUshVIi5dOUe1uFnZiXx3e9dQIDAQAB";
        String str ="responseCode=1000,errorCode=\"\",sdkflowId=201609091456250236910,orderNo=S3-33542912001561";
        String  signCode ="k5dqGZS7yBK4S0F/YJ+Sko8ecdGRWXAP/yvJSS1W1RAftg9UZCSi9wrIZKZrMAlOQOdwLz99xD5rJe9S1L4l3q8pM4HahqI3UV6AV17qkqKtJzAXuGTk74tfKibZG3eLwalcCDpWFFWOeSMsIIhCWfqVS4kY95E+0PkSEikNtnM=";
        boolean result =RSACoder.verify(str.getBytes(), rsaPublic, signCode);
        System.out.println("result:"+result);
    }
}
