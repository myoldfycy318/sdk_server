package com.dome.sdkserver.controller.webgame;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.dome.sdkserver.bq.util.GenOrderCode;
import com.dome.sdkserver.bq.util.HttpsUtil;
import com.dome.sdkserver.bq.util.MapUtil;
import com.dome.sdkserver.metadata.entity.bq.ogp.CpPayEntity;
import com.dome.sdkserver.metadata.entity.bq.ogp.OgpNotify;
import com.dome.sdkserver.metadata.entity.bq.ogp.OgpPayEntity;
import com.dome.sdkserver.metadata.entity.bq.ogp.OgpReqEntity;
import com.dome.sdkserver.metadata.entity.bq.pay.AppInfoEntity;
import com.dome.sdkserver.metadata.entity.bq.pay.OrderEntity;
import com.dome.sdkserver.service.game.GameService;
import com.dome.sdkserver.service.order.OrderService;
import com.dome.sdkserver.service.pay.qbao.bo.ChargePointInfo;
import com.dome.sdkserver.service.rabbitmq.RabbitMqService;
import com.dome.sdkserver.shangsu.TradeItem;
import com.dome.sdkserver.util.PropertiesUtil;
import com.dome.sdkserver.util.RedisUtil;
import com.dome.sdkserver.util.WebUtils;
import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.lang3.RandomStringUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpResponseException;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.BasicResponseHandler;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.joda.time.DateTime;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;
import redis.clients.jedis.exceptions.JedisException;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import java.io.IOException;
import java.math.BigDecimal;
import java.nio.charset.Charset;
import java.util.*;

/**
 * Created by hunsy on 2017/8/1.
 */
@Controller
@RequestMapping(value = "ogp")
public class OgpController {

    @Autowired
    private GameService gameService;
    @Autowired
    private OrderService orderService;
    @Autowired
    private PropertiesUtil domainConfig;

    private Logger logger = LoggerFactory.getLogger(getClass());

    @Autowired
    private RedisUtil redisUtil;

    @Resource(name = "rabbitMqService")
    private RabbitMqService rabbitMqService;

    /**
     * 支付
     */
    @RequestMapping(value = "pay")
    public String pay(
            CpPayEntity cpPayEntity,
            OgpReqEntity ogpReqEntity,
            Model model,
            HttpServletRequest req) {

        logger.info("cp entity : {}", JSON.toJSONString(cpPayEntity));
        logger.info("ogp entity : {}", JSON.toJSONString(ogpReqEntity));
        try {

            logger.info(JSON.toJSONString(cpPayEntity) + "-------------");
            //验证是否确少参数
            if (!cpPayEntity.validate()) {
                model.addAttribute("err", "缺少参数");
                return "/msg";
            }
            //检查订单是否存在
            if (sismember("sdkServer:ogp:cpTradeNo", cpPayEntity.getCp_trade_no())) {
                model.addAttribute("err", "订单号已存在");
                return "/msg";
            }

            //验证签名
            //获取游戏信息
            AppInfoEntity appInfoEntity = gameService.getAppInfo(cpPayEntity.getApp_code());
            if (appInfoEntity == null) {
                model.addAttribute("err", "应用不存在或已被删除");
                return "/msg";
            }
            //sdk生成的签名
            String sdkCpSign = cpPayEntity.cpSign(appInfoEntity.getPayKey());
            if (!StringUtils.equals(sdkCpSign, cpPayEntity.getSign())) {
                model.addAttribute("err", "签名错误");
                return "/msg";
            }
            //从uc获取用户信息
            JSONObject user = getOgpUser(cpPayEntity.getUser_id());
            if (user == null) {
                model.addAttribute("err", "充值用户不存在");
                return "/msg";
            }

            //验证是否过于频繁
            if (redisUtil.get("sdkServer:ogp:user:" + cpPayEntity.getUser_id()) != null) {
                model.addAttribute("err", "请求过于频繁");
                return "/msg";
            }

            //说明没有金额信息，跳转金额选择页面
            if (cpPayEntity.getTotal_fee() == 0) {
                //获取计费点
                JSONArray arr = payListRequest();
                List<Object> ls = new ArrayList<>();
                for (int i = 0; i < arr.size(); i++) {
                    JSONObject obj = arr.getJSONObject(i);
                    ls.add(obj.get("chargePoint"));
                }
                model.addAttribute("ls", ls);
                model.addAttribute("prepareEntity", cpPayEntity);
                return "/preparePay";
            }

            //防刷，10s.在确定不是跳转后，加上时间限制，防止连续请求
            redisUtil.setex("sdkServer:ogp:user" + cpPayEntity.getUser_id(), 10, cpPayEntity.getUser_id());
            String sdkTradeNo = GenOrderCode.next("");

            //请求ogp支付接口
            OrderEntity poe = new OrderEntity();
            poe.setAppCode(appInfoEntity.getAppCode());             //游戏AppCode
            poe.setAppName(appInfoEntity.getAppName());             //app名称
            poe.setChargePointAmount(cpPayEntity.getTotal_fee());   //金额
            poe.setBuyerId(cpPayEntity.getUser_id());               //用户id,uc的userId
            poe.setOrderNo(sdkTradeNo);                             //订单号
            poe.setGameOrderNo(cpPayEntity.getCp_trade_no());       //游戏方订单号
            poe.setPayNotifyUrl(appInfoEntity.getPayNotifyUrl());   //支付成功后通知cp的地址
            poe.setCurMonth(DateTime.now().toString("yyyyMM"));     //表后缀
            //// TODO: 2017/9/15 待增加 charge_point_code
            poe.setgRoleId(cpPayEntity.getRole_id());
            poe.setZoneId(cpPayEntity.getZone_id());
            poe.setZoneName(cpPayEntity.getZone_name());
            poe.setSysType(WebUtils.getSysType(req));
            poe.setChargePointCode("C0000000");
            poe.setChargePointName("充值"+cpPayEntity.getTotal_fee()/100+"元");
            orderService.insertThirdOrder2(poe);
            sadd("sdkServer:ogp:cpTradeNo", cpPayEntity.getCp_trade_no());

            ChargePointInfo chargePointInfo = new ChargePointInfo();
            chargePointInfo.setAppCode(appInfoEntity.getAppCode());
            chargePointInfo.setChargePointCode("C0000000");
            chargePointInfo.setChargePointName("");
            chargePointInfo.setChargePointAmount(new BigDecimal(cpPayEntity.getTotal_fee()));
            rabbitMqService.syncChargePoint(chargePointInfo);

            //------------------------------------------------------------
            //设置OGP的用户id
            ogpReqEntity.setUser_id(user.getString("openId"));
            ogpReqEntity.setUser_id("1");
            ogpReqEntity.setGame_id(Integer.valueOf(appInfoEntity.getOgpGameId()));
            //支付通知地址
            ogpReqEntity.setCp_notify_url(domainConfig.getString("ogp.payNotifyUrl"));
            ogpReqEntity.setCp_trade_no(sdkTradeNo);
            Map<String, String> params = ogpReqEntity.getParams(appInfoEntity.getOgpGameKey());
            //请求ogp
            JSONObject retObj = HttpsUtil.postJson(domainConfig.getString("ogp.payurl"), JSONObject.parseObject(JSON.toJSONString(params)));
            logger.info("req ogp ret:{}", retObj.toJSONString());
            if (retObj.getString("return_code").equals("SUCCESS")) {
                OrderEntity uoe = new OrderEntity();
                //预支付页面
                String prepay_url = retObj.getString("prepay_url");
                uoe.setTradeNo(retObj.getString("ogp_trade_no"));   //ogp的交易号
                uoe.setOrderNo(poe.getOrderNo());
                uoe.setCurMonth(poe.getCurMonth());
                // 更新支付信息 ogp_trade_no
                orderService.updateThirdOrder(uoe);
                //跳转回调
                return "redirect:" + prepay_url;
            } else {
                //支付失败
                OrderEntity uoe = new OrderEntity();
                uoe.setOrderNo(poe.getOrderNo());
                uoe.setOrderStatus(2);
                uoe.setCurMonth(poe.getCurMonth());
                // 更新支付信息 ogp_trade_no
                orderService.updateThirdOrder(uoe);
                model.addAttribute("err", "支付失败");
                return "/msg";
            }
        } catch (Exception e) {
            e.printStackTrace();
            model.addAttribute("msg", "系统异常");
            return "/msg";
        }
    }

    /**
     * 通知地址
     */
    @RequestMapping(value = "notify")
    @ResponseBody
    public String notify(@RequestBody final OgpNotify notify) {
        try {

            logger.info("notify:{}", JSON.toJSONString(notify));

            OrderEntity orderEntity = new OrderEntity();
            String yearAndMon = "20" + notify.getCp_trade_no().substring(0, 4);
            orderEntity.setCurMonth(yearAndMon);
            orderEntity.setOrderNo(notify.getCp_trade_no());
            orderEntity = orderService.queryThirdOrder(orderEntity);
            if (orderEntity == null) {
                logger.error("订单不存在");
                return "FAIL";
            }

            AppInfoEntity appInfoEntity = gameService.getAppInfo(orderEntity.getAppCode());
            String sdkSign = notify.generateSign(appInfoEntity.getOgpGameKey());
            if (!StringUtils.equals(sdkSign, notify.getSign())) {
                return "FAIL";
            }

            String tradeCode = notify.getTrade_status();
            int orderStatus = tradeCode.equals("SUCCESS") ? 1 : 2;
            //交易成功
            orderEntity.setOrderStatus(orderStatus);
            orderEntity.setCurMonth(yearAndMon);
            logger.info(JSON.toJSONString(orderEntity));
            //更新交易状态
            orderService.updateThirdOrder(orderEntity);
            //通知cp，下发道具
            final String url = appInfoEntity.getPayNotifyUrl();

            if (StringUtils.isNotEmpty(url)) {
                final Map<String, String> params = new HashMap<>();
                params.put("app_code", appInfoEntity.getAppCode() + "");
                params.put("trade_status", orderStatus + "");
                params.put("cp_trade_no", orderEntity.getGameOrderNo() + "");
                params.put("order_no", orderEntity.getOrderNo() + "");
                params.put("user_id", orderEntity.getBuyerId() + "");
                params.put("total_fee", orderEntity.getChargePointAmount() + "");
                params.put("ts", System.currentTimeMillis() + "");

                String signBf = MapUtil.createLinkString(params) + "&app_key=" + appInfoEntity.getAppKey();
                params.put("sign", DigestUtils.md5Hex(signBf).toUpperCase());
                //请求cp用着，最多请求三次
                doPost(url, params, new ResponseHandler<Object>() {
                    Timer t = new Timer();
                    int num = 0;
                    ResponseHandler rspHandler = this;
                    @Override
                    public Object handleResponse(HttpResponse response) throws ClientProtocolException, IOException {

                        if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {
                            t.schedule(new TimerTask() {
                                @Override
                                public void run() {
                                    if (num < 3) {
                                        doPost(url, params,rspHandler);
                                        num++;
                                    }
                                }
                            }, 0, 1000 * 60);
                        } else {
                            //更新通知状态
                            t.cancel();
                            OrderEntity orderEntity = new OrderEntity();
                            String yearAndMon = "20" + notify.getCp_trade_no().substring(0, 4);
                            orderEntity.setCurMonth(yearAndMon);
                            orderEntity.setOrderNo(notify.getCp_trade_no());
                            orderEntity.setCallbackStatus(1);
                            orderService.queryThirdOrder(orderEntity);
                        }
                        return null;
                    }
                });
            }

            return "OK";
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "FAIL";
    }


    /**
     * 通过uc的userId获取ogp的userId
     *
     * @param domeUserId
     * @return uc返回的用户信息
     */
//    @RequestMapping(value = "user")
//    @ResponseBody
    private JSONObject getOgpUser(String domeUserId) {
        //请求uc，获取OgpUserId。
        String url = domainConfig.getString("uc.getUserById");
        url += "?userId=" + domeUserId;
        JSONObject object = doGet(url);
        if (object.getIntValue("code") == 0) {
            return object.getJSONObject("data");
        }
        return null;
    }

    /**
     * 获取订单id
     *
     * @return 获取sdk的订单号.日期 + 6位随机数
     */
    private String getTradeNo() {

        return DateTime.now().toString("yyyyMMddHHmmsss") + RandomStringUtils.randomAlphanumeric(6);
    }

    /**
     * 请求ogp支付金额列表
     *
     * @return 获取开发平台配置的金额列表
     */
    @RequestMapping("paylist")
    @ResponseBody
    public JSONArray payListRequest() {

        String ogpPayUrl = domainConfig.getString("publish.chargePoints");
        JSONObject object = doGet(ogpPayUrl);
        if (object.getIntValue("responseCode") == 1000) {
            return object.getJSONObject("data").getJSONArray("list");
        }
        return null;
    }

    private JSONObject doGet(String url) {

        CloseableHttpClient client = getClient();
        HttpGet get = new HttpGet(url);
        get.setHeader("Content-Type", "application/json;charset=utf-8");
        CloseableHttpResponse response = null;
        try {
            response = client.execute(get);
            if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                return JSON.parseObject(EntityUtils.toString(response.getEntity()));
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                response.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return null;
    }

    private void doPost(final String url, final Map<String, String> params, ResponseHandler<Object> respHandler) {
        try {
            CloseableHttpClient client = getClient();
            HttpPost post = new HttpPost(url);

            if (params != null && params.keySet().size() > 0) {
                List<NameValuePair> lps = new ArrayList<>();
                Iterator<String> ite = params.keySet().iterator();
                while (ite.hasNext()) {
                    String key = ite.next();
                    String val = params.get(key);
                    lps.add(new BasicNameValuePair(key, val));
                }
                UrlEncodedFormEntity ue = new UrlEncodedFormEntity(lps, Charset.forName("utf-8"));
                post.setEntity(ue);
            }
            //异步请求
            client.execute(post, respHandler);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private CloseableHttpClient getClient() {

        CloseableHttpClient client = HttpClients.createDefault();
        return client;
    }


    private boolean sismember(String key, String member) {
        Jedis jedis = null;
        JedisPool pool = redisUtil.getPool();
        try {
            jedis = pool.getResource();
            boolean flag = jedis.sismember(key, member);
            return flag;
        } catch (Exception e) {
            logger.error("{}", e);
            if (jedis != null) {
                pool.returnBrokenResource(jedis);
            }
            throw new JedisException(e);
        } finally {
            if (pool != null) {
                pool.returnResource(jedis);
            }
        }
    }


    private void sadd(String key, String member) {
        Jedis jedis = null;
        JedisPool pool = redisUtil.getPool();
        try {
            jedis = pool.getResource();
            jedis.sadd(key, member);
        } catch (Exception e) {
            logger.error("{}", e);
            if (jedis != null) {
                pool.returnBrokenResource(jedis);
            }
            throw new JedisException(e);
        } finally {
            if (pool != null) {
                pool.returnResource(jedis);
            }
        }
    }


}
